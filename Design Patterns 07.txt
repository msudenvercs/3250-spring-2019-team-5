Design Patterns 07 


Adapter and Facade 




The Adapter Pattern 


• 
Converts the interface of a class into another 
interface the clients expect 
• 
Adapter let classes work together that 
couldn’t otherwise because of incompatible 
interfaces 

Two Types 

• 
Object adapters use composition 
• 
Class adapters use inheritance 

UML 




Object Adapter 


public class EnumerationIterator implements Iterator<Object> { 
Enumeration<?> enumeration; 

public EnumerationIterator(Enumeration<?> enumeration) { 
this.enumeration = enumeration; 
} 

public boolean hasNext() { 
return enumeration.hasMoreElements(); 
} 


public Object next() { 
return enumeration.nextElement(); 
} 


public void remove() { 
throw new UnsupportedOperationException(); 
} 
} 



Façade 


• 
Provides a unified interface to a set of 
interfaces in a subsystem 
• 
Façade defines a higher-level interface that 
makes the subsystem easier to use 

UML 


Sample code
/* Complex parts */

class CPU {
    public void freeze() { ... }
    public void jump(long position) { ... }
    public void execute() { ... }
}

class HardDrive {
    public byte[] read(long lba, int size) { ... }
}

class Memory {
    public void load(long position, byte[] data) { ... }
}

/* Facade */

class ComputerFacade {
    private final CPU processor;
    private final Memory ram;
    private final HardDrive hd;

    public ComputerFacade() {
        this.processor = new CPU();
        this.ram = new Memory();
        this.hd = new HardDrive();
    }

    public void start() {
        processor.freeze();
        ram.load(BOOT_ADDRESS, hd.read(BOOT_SECTOR, SECTOR_SIZE));
        processor.jump(BOOT_ADDRESS);
        processor.execute();
    }
}

/* Client */

class You {
    public static void main(String[] args) {
        var computer = new ComputerFacade();
        computer.start();
    }
}

Difference 


• 
Adapter alters and interface to make it usable 
• 
Façade makes a complicated interface easier 
to use 

Principle of Least Knowledge 


• 
Talk to only immediate friends 
• 
Decouples 
• 
Law of Demeter 
• 
Methods may talk to 
– 
Their own object 
– 
Objects passed as parameters 
– 
Objects they instantiate 
– 
Instance variables 

